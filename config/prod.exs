use Mix.Config

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# YndPhxBootstrapWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.
config :ynd_phx_bootstrap, YndPhxBootstrapWeb.Endpoint,
  http: [port: "${PORT}"],
  url: [host: "localhost", port: "${PORT}"], # This is critical for ensuring web-sockets properly authorize.
  server: true,
  root: ".",
  version: Application.spec(:phoenix_distillery, :vsn)
#   load_from_system_env: true,
#   url: [host: "example.com", port: 80],
#   cache_static_manifest: "priv/static/cache_manifest.json"

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :ynd_phx_bootstrap, YndPhxBootstrapWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :ynd_phx_bootstrap, YndPhxBootstrapWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :ynd_phx_bootstrap, YndPhxBootstrapWeb.Endpoint, server: true
#

config :sentry,
  dsn: "${SENTRY_ENDPOINT}",
  environment_name: Mix.env,
  included_environments: [:prod],
  enable_source_code_context: true,
  root_source_code_path: File.cwd!,
  tags: %{
    env: "production"
  },
  hackney_opts: [pool: :my_pool],
  in_app_module_whitelist: [YndPhxBootstrap]

config :ynd_phx_bootstrap, YndPhxBootstrap.Repo,
  adapter: Ecto.Adapters.Postgres,
  username: "${DB_REPO_USER}",
  password: "${DB_REPO_PASSWORD}",
  database: "${DB_REPO_NAME}",
  hostname: "${DB_REPO_HOST}",
  port: "${DB_REPO_PORT}",
  pool_size: 10

config :logger,
  backends: [{Logger.Backends.Gelf, :gelf_logger}]

config :logger, :gelf_logger,
  host: "${GRAYLOG_IP}",
  port: "${GRAYLOG_PORT}",
  application: "ynd_phx_bootstrap",
  compression: :raw,
  metadata: [:request_id, :function, :module, :file, :line],
  hostname: "${GRAYLOG_HOST}",
  tags: [
    env: "#{Mix.env}"
  ]
